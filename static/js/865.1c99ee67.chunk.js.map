{"version":3,"file":"static/js/865.1c99ee67.chunk.js","mappings":"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","sources":["components/form/fieldset/fieldset.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport \"./fieldset.css\";\r\n\r\nexport default function Fieldset() {\r\n\r\n    const [inputValues, setInputValues] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n      });\r\n\r\n    const [isInvalid, setIsInvalid] = useState({\r\n      name: false,\r\n      email: false,\r\n      phone: false,\r\n    });\r\n\r\n    function noTel({func}){\r\n      let value = document.getElementById('phone').value.trim();\r\n      if (value.length === 6) {\r\n        setInputValues((prevInputValues) => ({\r\n          ...prevInputValues,\r\n          ['phone']: '',\r\n        }));\r\n        setIsInvalid((prevIsInvalid) => ({\r\n          ...prevIsInvalid,\r\n          ['phone']: false,\r\n        }));\r\n      }\r\n      if (value.length < 6) {\r\n        setInputValues((prevInputValues) => ({\r\n          ...prevInputValues,\r\n          ['phone']: '+38 (0',\r\n        }));\r\n        setIsInvalid((prevIsInvalid) => ({\r\n          ...prevIsInvalid,\r\n          ['phone']: true,\r\n        }));\r\n      }\r\n      if (value.length > 6 && value.length < 23) {\r\n        setInputValues((prevInputValues) => ({\r\n          ...prevInputValues,\r\n          ['phone']: value,\r\n        }));\r\n        setIsInvalid((prevIsInvalid) => ({\r\n          ...prevIsInvalid,\r\n          ['phone']: true,\r\n        }));\r\n      }\r\n      else if(value.length === 23){\r\n        setInputValues((prevInputValues) => ({\r\n          ...prevInputValues,\r\n          ['phone']: value,\r\n        }));\r\n        setIsInvalid((prevIsInvalid) => ({\r\n          ...prevIsInvalid,\r\n          ['phone']: false,\r\n        }));\r\n      }\r\n    }\r\n\r\n    const handleInputChange = (event, fieldName) => {\r\n        let value = event.target.value;\r\n        if (fieldName === 'phone') {\r\n          let error = window.getComputedStyle(document.getElementsByTagName('fieldset')[2].getElementsByTagName('legend')[0]).color;\r\n          let errorColor = 'rgb(203, 61, 64)';\r\n          if (value.length === 0 || value.length < 6) {\r\n            setInputValues((prevInputValues) => ({\r\n              ...prevInputValues,\r\n              [fieldName]: '+38 (0',\r\n            }));\r\n          }\r\n          else if(value.length < 24){\r\n            if(error === errorColor){\r\n              setIsInvalid((prevIsInvalid) => ({\r\n                ...prevIsInvalid,\r\n                [fieldName]: true,\r\n              }));\r\n            }\r\n            else{\r\n              setIsInvalid((prevIsInvalid) => ({\r\n                ...prevIsInvalid,\r\n                [fieldName]: false,\r\n              }));\r\n            }\r\n            if (/\\d+$/.test(value)) {\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value,\r\n              }));\r\n            }\r\n            if(value.length === 8){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value + \") \",\r\n              }));\r\n            }\r\n            if(value.length === 9){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value.slice(0, -2),\r\n              }));\r\n            }\r\n            if(value.length === 10){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value.slice(0, -1) + ' ',\r\n              }));\r\n            }\r\n            if(value.length === 13){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value + \" - \",\r\n              }));\r\n            }\r\n            if(value.length === 15){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value.slice(0, -3),\r\n              }));\r\n            }\r\n            if(value.length === 16){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value.slice(0, -3) + ' - ',\r\n              }));\r\n            }\r\n            if(value.length === 18 ){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value + \" - \",\r\n              }));\r\n            }\r\n            if(value.length === 21){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value.slice(0, -3) + ' - ',\r\n              }));\r\n            }\r\n            if(value.length === 20){\r\n              setInputValues((prevInputValues) => ({\r\n                ...prevInputValues,\r\n                [fieldName]: value.slice(0, -3),\r\n              }));\r\n            }\r\n          }\r\n        }\r\n        if(fieldName === 'email'){\r\n          let error = window.getComputedStyle(document.getElementsByTagName('fieldset')[1].getElementsByTagName('legend')[0]).color;\r\n          let errorColor = 'rgb(203, 61, 64)';\r\n          if(value.length > 0){\r\n            if(error === errorColor){\r\n              setIsInvalid((prevIsInvalid) => ({\r\n                ...prevIsInvalid,\r\n                [fieldName]: true,\r\n              }));\r\n            }else{\r\n              setIsInvalid((prevIsInvalid) => ({\r\n                ...prevIsInvalid,\r\n                [fieldName]: false,\r\n              }));\r\n            }\r\n          }else{\r\n            setIsInvalid((prevIsInvalid) => ({\r\n              ...prevIsInvalid,\r\n              [fieldName]: false,\r\n            }));\r\n          }\r\n          setInputValues((prevInputValues) => ({\r\n            ...prevInputValues,\r\n            [fieldName]: value,\r\n          }));\r\n        }\r\n        if(fieldName === 'name'){\r\n          setInputValues((prevInputValues) => ({\r\n            ...prevInputValues,\r\n            [fieldName]: value,\r\n          }));\r\n          let error = window.getComputedStyle(document.getElementsByTagName('fieldset')[0].getElementsByTagName('legend')[0]).color;\r\n          let errorColor = 'rgb(203, 61, 64)';\r\n          if(value.length > 0){\r\n            if(error === errorColor){\r\n              setIsInvalid((prevIsInvalid) => ({\r\n                ...prevIsInvalid,\r\n                [fieldName]: true,\r\n              }));\r\n            }else{\r\n              setIsInvalid((prevIsInvalid) => ({\r\n                ...prevIsInvalid,\r\n                [fieldName]: false,\r\n              }));\r\n            }\r\n          }else{\r\n              setIsInvalid((prevIsInvalid) => ({\r\n                ...prevIsInvalid,\r\n                [fieldName]: false,\r\n              }));\r\n            }\r\n        }\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <fieldset className={isInvalid.name ? 'error' : '' }>\r\n              <input\r\n              minLength={2}\r\n              maxLength={60}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              placeholder='Name'\r\n              required\r\n              value={inputValues.name}\r\n              onChange={(e) => handleInputChange(e, 'name')}\r\n              />\r\n              <legend>Name</legend>\r\n           </fieldset>\r\n           <fieldset className={isInvalid.email ? 'error' : '' }>\r\n              <input\r\n              minLength= {2}\r\n              maxLength= {100}\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              placeholder='Email'\r\n              required\r\n              value={inputValues.email}\r\n              onChange={(e) => handleInputChange(e, 'email')}\r\n              />\r\n              <legend>Email</legend>\r\n              <span>test@test.com</span>\r\n           </fieldset>\r\n           <fieldset className={isInvalid.phone ? 'error' : '' }>\r\n              <input\r\n              onBlur={() => noTel('-')}\r\n              onFocus={() => noTel('+')}\r\n              pattern=\"\\+38 \\(\\d{3}\\) \\d{3} - \\d{2} - \\d{2}\"\r\n              type=\"tel\"\r\n              name=\"phone\"\r\n              id=\"phone\"\r\n              placeholder='Phone'\r\n              required\r\n              value={inputValues.phone}\r\n              onChange={(e) => handleInputChange(e, 'phone')}\r\n              />\r\n              <legend>Phone</legend>\r\n              <span>+38 (XXX) XXX - XX - XX</span>\r\n           </fieldset>\r\n        </>\r\n    )\r\n}"],"names":["Fieldset","inputValues","setInputValues","useState","name","email","phone","isInvalid","setIsInvalid","noTel","_ref","func","value","document","getElementById","trim","length","prevInputValues","prevIsInvalid","handleInputChange","event","fieldName","target","error","window","getComputedStyle","getElementsByTagName","color","errorColor","test","slice","_jsxs","_Fragment","children","className","_jsx","minLength","maxLength","type","id","placeholder","required","onChange","e","onBlur","onFocus","pattern"],"sourceRoot":""}